package com.syb.datacloud.service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author Admin
 */
@Service
public class FileService {


    @Value("${msg.file.path}")
    private String msgFilePath;

    @Value("${file.save.path}")
    private String fileSavePath;

    /**
     * 读取文件参数
     */
    public JSONArray readFileMessage() {
        byte[] bs;
        String msg = null;
        try {
            File file = new File(msgFilePath);
            if (!file.isFile()){
                file.createNewFile();
            }
            FileInputStream fis = new FileInputStream(msgFilePath);
            bs = IOUtils.toByteArray(fis);
            fis.read(bs);
            fis.close();
            if (bs == null) {
                return null;
            }

            msg = new String(bs, "UTF-8");
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (StringUtils.isEmpty(msg)) {
            return new JSONArray();
        }
        return JSONArray.parseArray(msg);
    }

    /**
     * 根据文件id查询文件
     *
     * @param fileId
     * @return
     */
    public JSONObject searchFile(String fileId) {
        JSONArray jsonArray = readFileMessage();
        return searchFile(fileId, jsonArray);
    }

    /**
     * 根据文件id查询文件
     *
     * @param fileId    文件id
     * @param jsonArray 文件json
     * @return
     */
    public JSONObject searchFile(String fileId, JSONArray jsonArray) {
        if (StringUtils.isEmpty(fileId)) {
            return null;
        }
        for (Object o : jsonArray) {
            JSONObject json = (JSONObject) o;
            if (fileId.equals(json.getString("fileId"))) {
                return json;
            }
        }
        return null;
    }

    /**
     * 根据文件名搜索文件
     * 只返回第一个文件
     * @param fileName 文件名
     * @return
     */
    public JSONObject searchFileByName(String fileName) {
        JSONArray jsonArray = readFileMessage();
        return searchFileByName(fileName,jsonArray);
    }


    /**
     * 根据文件名搜索文件
     * 只返回第一个文件
     * @param fileName 文件名
     * @param jsonArray 文件内容json格式
     * @return
     */
    public JSONObject searchFileByName(String fileName, JSONArray jsonArray) {
        if (StringUtils.isEmpty(fileName)) {
            return null;
        }
        for (Object o : jsonArray) {
            JSONObject json = (JSONObject) o;
            if (fileName.contains(json.getString("fileName"))) {
                return json;
            }
        }
        return null;
    }


    /**
     * 根据文件id下载文件
     *
     * @param fileId
     * @return
     */
    public JSONObject downloadFile(String fileId) {
        JSONObject jsonObject = searchFile(fileId);
        if (jsonObject == null) {
            return null;
        }

        byte[] bytes = new byte[0];
        try {
            FileInputStream fis = new FileInputStream(jsonObject.getString("filePath"));
            bytes = IOUtils.toByteArray(fis);
            fis.read(bytes);
            fis.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (bytes == null) {
            return null;
        }
        String fileBase64 = Base64.encodeBase64String(bytes);
        String fileName = jsonObject.getString("fileName");
        JSONObject json = new JSONObject();
        json.put("fileBase64",fileBase64);
        json.put("fileName",fileName);
        return json;
    }

    /**
     * 根据文件名下载文件
     * @param fileId
     * @return
     */
    public JSONObject downloadFileByName(String fileId) {
        JSONObject jsonObject = searchFileByName(fileId);
        return downloadFile(jsonObject.getString("fileId"));
    }


    /**
     * 上传文件
     * @param fileBase64 文件base64
     * @param fileName 文件名称
     * @return file
     */
    public String uploadFile(String fileBase64, String fileName) {
        String fileId = getFileId();
        JSONArray jsonArray = readFileMessage();
        JSONObject jsonObject = searchFile(fileId, jsonArray);
        if (jsonObject == null) {
            JSONObject json = new JSONObject();
            json.put("fileName",fileName);
            byte[] bytes = Base64.decodeBase64(fileBase64);
            // create file path
            String newFileId = getFileId();
            json.put("fileId",newFileId);
            ArrayList<String> list = getStringArray(fileId, 8);
            String filePath = fileSavePath;
            for (String s : list) {
                filePath = filePath+File.separator+s;
            }
            File file = new File(filePath);
            if (!file.exists()){
                file.mkdirs();
            }
            filePath = filePath+File.separator+fileName;
            try {
                FileOutputStream fos = new FileOutputStream(filePath);
                fos.write(bytes);
                fos.flush();
                fos.close();
                json.put("filePath",filePath);
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String timeStr = format.format(new Date());
                json.put("createTime",timeStr);
                // 文件写入文件信息中
                FileOutputStream fosMsg = new FileOutputStream(msgFilePath);
                jsonArray.add(json);
                fosMsg.write(jsonArray.toJSONString().getBytes("UTF-8"));
                fosMsg.flush();
                fosMsg.close();
            } catch (IOException e) {
                e.printStackTrace();
                return null;
            }

            return newFileId;
        }else{
            return null;
        }
    }

    /**
     * 指定间隔数分割字符串
     * @param str
     * @param spitNum
     * @return
     */
    private ArrayList<String> getStringArray(String str, int spitNum){
        if (StringUtils.isBlank(str)){
            return null;
        }
        ArrayList<String> list = new ArrayList<>((str.length()/spitNum)+1);
        for (int i = 0; i < str.length(); i=i+spitNum) {
            String substring ;
            if (i+spitNum<=str.length()){
                substring = str.substring(i, i + spitNum);
            }else{
                substring = str.substring(i,str.length());
            }

            list.add(substring);
        }
        return list;
    }

    public static void main(String[] args) throws IOException {
//        FileService fileService = new FileService();
//        ArrayList<String> list = fileService.getStringArray(fileService.getFileId(), 8);
//        String s = Arrays.toString(list.toArray());
//        System.err.println(s);
//        FileInputStream fis = new FileInputStream("C:\\Users\\Admin\\Desktop\\dataCloud.zip");
//        byte[] bytes = IOUtils.toByteArray(fis);
//        String s = Base64.encodeBase64String(bytes);
//        System.err.println(s);
//        FileOutputStream fos = new FileOutputStream("F:\\ideaWorkSpace\\test.docx");
//        fos.write(Base64.decodeBase64(""));
//        fos.flush();
//        fos.close();


    }

    /**
     * 生成文件
     * uuid
     *
     * @return
     */
    private String getFileId() {
        return UUID.randomUUID().toString().replace("-", "");
    }


}
